import{i as c}from"./request.CetvaxyE.js";import{U as x}from"./entry.C5iIeEMf.js";const h=e=>+(e.hits/(e.shots/100)||0).toFixed(2),m=e=>+(e.wins/(e.battles/100)||0).toFixed(2),g=e=>{const t=e.battles||0;return+((e.survived_battles||0)/(t/100)||0).toFixed(2)},i=e=>{const t=e.battles||0;return+((e.damage_dealt||0)/t||0).toFixed(0)},M=e=>{const t=e.battles||0;return+((e.xp||0)/t||0).toFixed(0)},p=e=>{const t=e.battles||0;return+((e.frags||0)/t||0).toFixed(2)},w=e=>{const t=e.battles||0;return+((e.frags8p||0)/t||0).toFixed(2)},d=e=>{const t=e.battles||0;return+((e.spotted||0)/t||0).toFixed(2)},P=e=>({...e,winRate:m(e),hitRate:h(e),surviveRate:g(e),damagePerBattle:i(e),xpPerBattle:M(e),fragPerBattle:p(e),spottedPerBattle:d(e)}),B=(e,t=1)=>{if(!c(e))throw new Error("accountStats: value is nota a object");return{battles:Math.floor(e.battles/t),capture_points:Math.floor(e.capture_points/t),damage_dealt:Math.floor(e.damage_dealt/t),damage_received:Math.floor(e.damage_received/t),dropped_capture_points:Math.floor(e.dropped_capture_points/t),frags8p:Math.floor(e.frags8p/t),frags:Math.floor(e.frags/t),hits:Math.floor(e.hits/t),losses:Math.floor(e.losses/t),max_frags:Math.floor(e.max_frags/t),max_frags_tank_id:Math.floor(e.max_frags_tank_id/t),max_xp:Math.floor(e.max_xp/t),max_xp_tank_id:Math.floor(e.max_xp_tank_id/t),shots:Math.floor(e.shots/t),spotted:Math.floor(e.spotted/t),survived_battles:Math.floor(e.survived_battles/t),win_and_survived:Math.floor(e.win_and_survived/t),wins:Math.floor(e.wins/t),xp:Math.floor(e.xp/t),winRate:m(e),hitRate:h(e),surviveRate:g(e),xpPerBattle:M(e),damagePerBattle:i(e),fragPerBattle:p(e),frag8pPerBattle:w(e),spottedPerBattle:d(e)}},u=(e,t)=>{if(!c(e)||!c(t))throw new Error("addValues: some value is not a object");const a={};for(const r in e){const n=Number(e[r]??0),l=Number(t[r]??0);a[r]=n-l}return a},R=(e,t)=>{const a={frags:e.frags,clan:u(e.clan,t.clan),all:u(e.all,t.all),rating:void 0};return e.rating&&t.rating&&(a.rating=u(e.rating,t.rating)),a},_=(e,t)=>{if(!c(e)||!c(t))throw new Error("addValues: some value is not a object");const a={};for(const r in e){const n=Number(e[r]??0),l=Number(t[r]??0);a[r]=n+l}return a},F=(e,t)=>{const a={frags:e.frags,clan:_(e.clan,t.clan),all:_(e.all,t.all),rating:void 0};return e.rating&&t.rating&&(a.rating=_(e.rating,t.rating)),a},k=(e,t=1)=>{if(!c(e))throw new Error("accountStats: value is nota a object");return{battles:Math.floor(e.battles/t),capture_points:Math.floor(e.capture_points/t),damage_dealt:Math.floor(e.damage_dealt/t),damage_received:Math.floor(e.damage_received/t),dropped_capture_points:Math.floor(e.dropped_capture_points/t),frags8p:Math.floor(e.frags8p/t),frags:Math.floor(e.frags/t),hits:Math.floor(e.hits/t),losses:Math.floor(e.losses/t),shots:Math.floor(e.shots/t),spotted:Math.floor(e.spotted/t),survived_battles:Math.floor(e.survived_battles/t),win_and_survived:Math.floor(e.win_and_survived/t),wins:Math.floor(e.wins/t),xp:Math.floor(e.xp/t),calibration_battles_left:Math.floor(e.calibration_battles_left/t),current_season:Math.floor(e.current_season/t),mm_rating:+(e.mm_rating/t).toFixed(2),recalibration_start_time:Math.floor(e.recalibration_start_time/t),is_recalibration:e.is_recalibration,rating:e.mm_rating?Math.floor(e.mm_rating*10+3e3):0,winRate:m(e),hitRate:h(e),surviveRate:g(e),damagePerBattle:i(e),fragPerBattle:p(e),spottedPerBattle:d(e)}},v=(e,t,a)=>{var n,l;const r={achievements:{},max_series:{}};for(const o in e.achievements){const s=e.achievements[o]||0,f=((n=t.achievements)==null?void 0:n[o])||0,b=Array.isArray(a==null?void 0:a[o].options);b?r.achievements[o]=Math.abs(s-f)?s:0:r.achievements[o]=b?s:s-f}for(const o in e.max_series){const s=e.max_series[o]||0,f=((l=t.max_series)==null?void 0:l[o])||0;r.max_series[o]=s-f}return r},y=(e,t)=>{var a,r;return[e.all.wins*1e3,e.all.damage_dealt,(((a=t.achievements)==null?void 0:a.medalBrothersInArms)??0)*(1500/2),(((r=t.achievements)==null?void 0:r.medalCrucialContribution)??0)*(3500/2)].reduce((n,l)=>n+l,0)},V=e=>{var t;return(((t=e.achievements.max_series)==null?void 0:t.jointVictory)||0)/(e.wins/100)},j=e=>{const{battles:t,createAt:a}=e,r=(Date.now()-a)/x;return Math.floor(t/Math.max(r,1))},A=e=>e.reduce((t,a)=>a.mark_of_mastery===4?t+1:t,0),D={accountAll:B,accountRating:k,tank:P,diffFull:R,diff:u,sum:_,sumFull:F,achievementsDiff:v,teamPoints:y,winsInPlatoon:V,battlesPerDay:j,totalMasters:A};export{D as s};
